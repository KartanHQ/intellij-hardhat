
name: Build
on:
  # Trigger the workflow on version tag pushes
  push:
    tags: ["v*.*.*"]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  # Run verifyPlugin, and IntelliJ Plugin Verifier
  # Build plugin and provide the artifact for the next workflow jobs
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.4.0

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.4

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"

          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=pluginVerifierHomeDir::~/.pluginVerifier"

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v2.1.7
        with:
          path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Pplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

      # Run Qodana inspections
#      - name: Qodana - Code Inspection
#        uses: JetBrains/qodana-action@v4.2.5

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content
          
          echo "::set-output name=filename::${FILENAME:0:-4}"

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1.1.5
        id: git-cliff
        with:
          config: .gtihub/changelog/cliff.toml
          args: -vv --latest --strip all
        env:
          OUTPUT: CHANGES.md

      # Set the changelog variable - which is generated by git-cliff
      - name: Set the changelog variable
        id: release
        shell: bash
        run: |
          c=$(cat ${{ steps.git-cliff.outputs.changelog }})
          c="$(printf "$c" | tail -n +3)"
          c="${r//'%'/'%25'}"     # Multiline escape sequences for %
          c="${r//$'\n'/'%0A'}"   # Multiline escape sequences for '\n'
          c="${r//$'\r'/'%0D'}"   # Multiline escape sequences for '\r'
          echo "::set-output name=CHANGELOG::$c"

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        uses: softprops/action-gh-release@v0.1.14
        with:
          draft: true
          name: "v${{ needs.build.outputs.version }}"
          body: "${{ needs.build.outputs.changelog }}"
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
